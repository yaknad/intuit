spring.application.name=player-service
logging.level.com.example.intuit.player.service=DEBUG

### Approach 1 settings ###
app.approach1.playerFilePath="/static/player.csv"

### Approach 2 settings TBD ###

# Kafka Configuration
#####################
# comment this when running in docker
#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.template.default-topic=file-events
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.key-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.consumer.group-id=player-group
##spring.kafka.producer.retries=3
#spring.kafka.producer.properties.max.block.ms=1000
#spring.kafka.producer.properties.request.timeout.ms=2000
##spring.kafka.producer.properties.delivery.timeout.ms=2000
##spring.kafka.producer.properties.maxinflightrequestsperconnection=1
##spring.kafka.producer.properties.enableidempotency=true
#app.approach2.kafka.retry.maxAttempts=3
#app.approach2.kafka.retry.maxDelay=500
#app.approach2.kafka.topic=file-events

# PostgreSQL Configuration
###########################
# uncomment this when running in docker (NOT required since it's in the docker-compose already)
#spring.datasource.url=jdbc:postgresql://postgres:5432/players
# uncomment this when running locally (on IntelliJ):
#spring.datasource.url=jdbc:postgresql://localhost:5432/players
#spring.datasource.username=postgres
#spring.datasource.password=password
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.show-sql=true


